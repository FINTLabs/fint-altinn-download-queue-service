plugins {
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'groovy'
}

group = 'no.fint'
sourceCompatibility = '1.8'

configurations {
	jaxb
}

repositories {
	mavenCentral()
	maven { url "https://repo.fintlabs.no/releases" }
}

task genJaxb {
	ext.downloadQueueSourcesDir = "$buildDir/generated-sources/downloadqueue"
	ext.downloadQueueClassesDir = "$buildDir/classes/downloadqueue"
	ext.downloadQueueSchema = "$projectDir/src/main/resources/DownloadQueueExternalBasic.wsdl"

	ext.attachmentDataStreamedSourcesDir = "$buildDir/generated-sources/attachmentdatastreamed"
	ext.attachmentDataStreamedClassessDir = "$buildDir/classes/attachmentdatastreamed"
	ext.attachmentDataStreamedSchema = "$projectDir/src/main/resources/ServiceOwnerArchiveExternalStreamedBasic.wsdl"

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath

			mkdir(dir: downloadQueueSourcesDir)
			mkdir(dir: downloadQueueClassesDir)

			xjc(destdir: downloadQueueSourcesDir, schema: downloadQueueSchema,
					package: "no.altinn.downloadqueue.wsdl") {
				arg(value: "-wsdl")
				produces(dir: downloadQueueSourcesDir, includes: "**/*.java")
			}

			javac(destdir: downloadQueueClassesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: downloadQueueSourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: downloadQueueClassesDir) {
				fileset(dir: downloadQueueSourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}

			mkdir(dir: attachmentDataStreamedSourcesDir)
			mkdir(dir: attachmentDataStreamedClassessDir)

			xjc(destdir: attachmentDataStreamedSourcesDir, schema: attachmentDataStreamedSchema,
					package: "no.altinn.attachmentdatastreamed.wsdl") {
				arg(value: "-wsdl")
				produces(dir: attachmentDataStreamedSourcesDir, includes: "**/*.java")
			}

			javac(destdir: attachmentDataStreamedClassessDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: attachmentDataStreamedSourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: attachmentDataStreamedClassessDir) {
				fileset(dir: attachmentDataStreamedSourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation('io.micrometer:micrometer-registry-prometheus')
	implementation 'no.fint:fint-altinn-model:1.0.2'

	implementation 'org.apache.commons:commons-lang3'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	compile(files(genJaxb.downloadQueueClassesDir, genJaxb.attachmentDataStreamedClassessDir).builtBy(genJaxb))
	jaxb 'com.sun.xml.bind:jaxb-xjc:2.1.7'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.ws:spring-ws-test'
	testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'
}
